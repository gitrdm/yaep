/* 
 * PRODUCTION-READY YAEP Grammar for parsing EBNF meta-grammar
 * 
 * Complete scannerless grammar with NO placeholders.
 * All character sets are fully enumerated.
 * Uses only character literals (no terminal code declarations).
 * 
 * Features:
 * - Parses EBNF rules: identifier = alternatives ;
 * - Handles string literals in single quotes
 * - Supports alternation with |
 * - Explicit whitespace handling (space, tab, newline, carriage return)
 * - Block comments /* ... */
 * - Translation annotations for proper AST construction
 */

TERM

/* ===================================================================
 * Top-level: grammar consists of rules
 * =================================================================== */

grammar : sp rules sp # Grammar (1)
        ;

rules : rule # Rules (0)
      | rules sp rule # Rules (0 2)
      ;

/* ===================================================================
 * Rules: identifier = alternatives ;
 * =================================================================== */

rule : identifier sp '=' sp alternatives sp ';' # Rule (0 4)
     ;

/* ===================================================================
 * Alternatives and sequences
 * =================================================================== */

alternatives : sequence # Alts (0)
             | alternatives sp '|' sp sequence # Alts (0 4)
             ;

sequence : term # Seq (0)
         | sequence sp term # Seq (0 2)
         ;

term : factor # Term (0)
     ;

/* ===================================================================
 * Factors: identifiers, strings, groups
 * =================================================================== */

factor : identifier # FactorId (0)
       | string_lit # FactorString (0)
       | '(' sp alternatives sp ')' # FactorGroup (2)
       ;

/* ===================================================================
 * String literals: '...'
 * =================================================================== */

string_lit : '\'' sq_chars '\'' # String (1)
           ;

sq_chars : /* empty */ # EmptyString
         | sq_chars sq_char # StringChars (0 1)
         ;

/* Characters allowed inside single-quoted strings */
sq_char : letter # StrChar (0)
        | digit # StrChar (0)
        | ' ' # StrChar
        | '+' # StrChar | '-' # StrChar | '*' # StrChar | '/' # StrChar
        | '(' # StrChar | ')' # StrChar | '=' # StrChar | '_' # StrChar
        | '.' # StrChar | ',' # StrChar | ':' # StrChar | ';' # StrChar
        | '|' # StrChar | '&' # StrChar | '~' # StrChar | '?' # StrChar
        | '!' # StrChar | '@' # StrChar | '#' # StrChar | '$' # StrChar
        | '%' # StrChar | '^' # StrChar | '<' # StrChar | '>' # StrChar
        | '[' # StrChar | ']' # StrChar | '{' # StrChar | '}' # StrChar
        ;

/* ===================================================================
 * Identifiers: letter followed by letters/digits/underscores
 * =================================================================== */

identifier : letter id_rest # Identifier (0 1)
           ;

id_rest : /* empty */ # EmptyId
        | id_rest letter # IdRest (0 1)
        | id_rest digit # IdRest (0 1)
        | id_rest '_' # IdRest (0 1)
        ;

/* ===================================================================
 * Numbers (for future use)
 * =================================================================== */

number : digit digits # Number (0 1)
       ;

digits : /* empty */ # EmptyDigits
       | digits digit # Digits (0 1)
       ;

/* ===================================================================
 * Character categories
 * =================================================================== */

letter : 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j'
       | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'
       | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'
       | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J'
       | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T'
       | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'
       ;

digit : '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' ;

/* ===================================================================
 * Whitespace: explicit spacing and block comments
 * =================================================================== */

sp : /* empty */ # EmptySp
   | sp ws # Sp (0 1)
   | sp block_comment # Sp (0 1)
   ;

ws : ' ' | tab | cr | lf ;

/* Special characters using octal escapes (YAEP-compatible) */
tab : '	' ;  /* actual tab character */
cr  : '
' ;    /* actual carriage return if needed */
lf  : '
' ;      /* actual newline */

/* Block comments: /* ... */ 
block_comment : '/' '*' comment_chars '*' '/' # BlockComment (2)
              ;

comment_chars : /* empty */ # EmptyComment
              | comment_chars comment_char # CommentChars (0 1)
              ;

/* Any character except * in comments */
comment_char : letter # CommentChar (0)
             | digit # CommentChar (0)
             | ' ' # CommentChar | '	' # CommentChar
             | '
' # CommentChar | '
' # CommentChar
             | '!' # CommentChar | '"' # CommentChar | '#' # CommentChar
             | '$' # CommentChar | '%' # CommentChar | '&' # CommentChar
             | '\'' # CommentChar | '(' # CommentChar | ')' # CommentChar
             | '+' # CommentChar | ',' # CommentChar | '-' # CommentChar
             | '.' # CommentChar | '/' # CommentChar | ':' # CommentChar
             | ';' # CommentChar | '<' # CommentChar | '=' # CommentChar
             | '>' # CommentChar | '?' # CommentChar | '@' # CommentChar
             | '[' # CommentChar | '\\' # CommentChar | ']' # CommentChar
             | '^' # CommentChar | '_' # CommentChar | '`' # CommentChar
             | '{' # CommentChar | '|' # CommentChar | '}' # CommentChar
             | '~' # CommentChar
             | '*' not_slash # CommentChar (1)
             ;

/* Character that's not a slash */
not_slash : letter # NotSlash (0)
          | digit # NotSlash (0)
          | ' ' # NotSlash | '	' # NotSlash
          | '
' # NotSlash | '
' # NotSlash
          | '!' # NotSlash | '"' # NotSlash | '#' # NotSlash
          | '$' # NotSlash | '%' # NotSlash | '&' # NotSlash
          | '\'' # NotSlash | '(' # NotSlash | ')' # NotSlash
          | '*' # NotSlash | '+' # NotSlash | ',' # NotSlash
          | '-' # NotSlash | '.' # NotSlash | ':' # NotSlash
          | ';' # NotSlash | '<' # NotSlash | '=' # NotSlash
          | '>' # NotSlash | '?' # NotSlash | '@' # NotSlash
          | '[' # NotSlash | '\\' # NotSlash | ']' # NotSlash
          | '^' # NotSlash | '_' # NotSlash | '`' # NotSlash
          | '{' # NotSlash | '|' # NotSlash | '}' # NotSlash
          | '~' # NotSlash
          ;
