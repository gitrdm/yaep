2025-10-04  GitHub Copilot  <copilot@example.com>

	* src/sgramm.y: Preserve UTF-8 bytes for character literals, recover the
	decoded scalar from appended metadata, accept combining-mark
	identifiers, and expand number parsing to all Nd digits with
	mixed-script detection.  Validate grammar text with detailed UTF-8
	diagnostics before lexing.
	* src/unicode/yaep_unicode.c, src/unicode/yaep_unicode.h: Broaden identifier
	continuation categories, expose yaep_utf8_digit_value, and enrich the
	validator API with offset/error reporting.
	* src/yaep.h: Reserve YAEP_INVALID_UTF8 for preflight validation failures.
	* test/C/test_utf8.c, test/C++/test_utf8.cpp: Extend regression
	grammars to cover Ï€ literals, combining-mark identifiers, and
	Arabic-Indic digit assignments.
	* test/C/test_utf8_invalid.c, test/C++/test_utf8_invalid.cpp: New
	sanity checks that malformed UTF-8 is rejected before lexing.
	* test/C/CMakeLists.txt, test/C++/CMakeLists.txt: Wire new UTF-8 tests
	into the suite.
	* doc/unicode_support.md: Document Unicode handling policy, including
	normalisation guidance and helper snippets.
	* README.md: Link to the Unicode support guide for quick discovery.

2025-10-04  gitrdm  <gitrdm@example.com>

	* yaep.c: Document parser list allocator tracking and explain stale
	pointer fix.  Ensure allocator is remembered even after grammar
	teardown to avoid double free when loading multiple grammars.
	* src/unicode/yaep_unicode.c, src/unicode/yaep_unicode.h: Describe UTF-8 helper
	utilities enabling code point iteration and classification with
	ASCII fast paths.  (New in-tree UTF-8 plumbing.)
	* sgramm.y: Lexer now consumes UTF-8 code points safely, fixing
	identifier lookahead on multi-byte characters.
	* test/C/test_utf8.c, test/C++/test_utf8.cpp: Keep regression that
	reloads an ASCII grammar after a UTF-8 parse, ensuring parser list
	state resets cleanly.
	* CMakeLists.txt, Makefile.in: Wire utf8proc and unicode sources into
	all build variants.
	* test/C/test_utf8_simple.c, test/C/test_utf8_double.c: Exercise
	multi-script grammars and repeated parser creation to stress UTF-8
	and allocator fixes.

2018-11-02  Vladimir Makarov  <vmakarov@gcc.gnu.org>

	* src/yape.c (traverse_pruned_translation): Process next alt node
	from the start again.

2018-11-02  Vladimir Makarov  <vmakarov@gcc.gnu.org>

	* src/compare_parsers.tst.in: Remove mentioning ammunition.  Print
	better messages.
	(set_sgrammar): Fix typo in OS_CREATE call.

2018-10-21  Vladimir Makarov  <vmakarov@gcc.gnu.org>

	* allocate.[ch]: Use GNU style format.
	* compare_parsers.tst.in: Ditto.
	* hashtab.{c,cpp}: Ditto.
	* objstack.{c,h,cpp}: Ditto.
	* sgramm.y: Ditto.
	* vlobject.{c,h,cpp}: Ditto.
	* yaep.{c,cpp}: Ditto.
	* yaep[++].tst.in: Ditto.

2018-10-21  Vladimir Makarov  <vmakarov@gcc.gnu.org>

	* src/compare_parsers.tst.in: Add forward func decls.  Remove old
	C style func decls.
	* src/yaep.tst.in: Ditto.

2018-10-21  Alexander Klauer

	* Merge: https://github.com/vnmakarov/yaep/pull/16

2016-11-04  Vladimir Makarov  <vmakarov@gcc.gnu.org>

	* Makefile.in (install, uninstall): Process allocate.h.

2015-10-06  Vladimir Makarov  <vmakarov@gcc.gnu.org>

	* compare_parsers.tst.in: Use YAEPLIB and YAEPDIR.

2015-10-06  Vladimir Makarov  <vmakarov@gcc.gnu.org>

	* ChangeLog.YAEP: Start.
	* yaep.c (struct sit_dist, first_free_sit_dist_index): Remove.
	(sit_dist_vlo, sit_dist_vec_check_vlo): Ditto.
	(sit_dist_set_init, empty_sit_dist_set, sit_dist_insert): Rewrite
	for new (sit, dist) set implementation.
	(sit_dist_set_fin): Ditto.
	(make_parse): Add more debug printing.
	* compare_parsers.tst.in: Move from MSTA/compare.tst.  Add
	checking MSTA.  Add big test.
	* yaep_part.sgml.in, yaep_part++.sgml.in: New.
	* whole_gcc_test.i: New.

